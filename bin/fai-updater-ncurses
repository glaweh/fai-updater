#! /usr/bin/perl -w
# 
#     fai-updater - start and supervise fai softupdates on many hosts
#     Copyright (C) 2004-2006,2020  Henning Glawe <glaweh@debian.org>
# 
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with this program; if not, write to the Free Software
#     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 
# 
use strict;
use warnings;

use File::Path qw(make_path);
use FindBin;
use lib "$FindBin::RealBin/../lib";
use Getopt::Long;
use FAI::Updater;
use FAI::Updater::Display::Logfile;
use FAI::Updater::Display::Curses;
use POSIX qw(strftime);

our $VERSION="1.0";

my $cui;
my $updater;
my $statusdisplay;
my $updater_win;
my $viewer_win;
my $logdir;
my $quit=0;
my $libexec_dir = "$FindBin::RealBin/../libexec";

sub HELP_MESSAGE {
    my $FH = shift;
    print $FH <<EOF;
  
Usage: $0 [options] <\@netgroup|%hostlist|host [...]>

Help Options:
  -h, --help                 display this help message
  --version                  print version information

Application Options:
  -o, --ordered              ordered mode: don't randomize order of hosts
  -s, --simultaneous <NUM>   run updates on NUM hosts simultanously
                             (default: $FAI::Updater::DEFAULT{MAX_SIMULTANEOUS})
  -n, --dryrun               dryrun mode: use a dummy-script instead of
                             really contacting the clients
  -c, --command <CMD>        run this command instead of default faiupdater script.
  -l, --hostlist <CMD>       run this command to get hostlist. host parameters starting with %
                             are passed to this command.

EOF
}

sub VERSION_MESSAGE {
    my $FH = shift;
    print $FH <<EOF
$0 version $VERSION
running under Perl version $^V.
EOF
};

sub updater_cb() {
	if ($updater->run()) {
	} elsif ($quit) {
		exit(0);
	} else {
		$statusdisplay->text("idle");
		$statusdisplay->draw();
	}
}

sub quit() {
	# Adrian: add quit-confirm dialog
	my $return = $cui->dialog(
                        -message   => "Do you really want to quit ?",
                        -title     => "Confirm quit",
                        -buttons   => ['yes', 'no'],
	);
	if ($return) {
		cancel_update();
		$quit=1;
	}
}

sub cancel_update() {
	if ($updater->max_simultanous() > 0) {
		$statusdisplay->text("cancelling...");
		$statusdisplay->draw();
		$updater->max_simultanous(0);
	}
}

sub select_handler() {
	my $listbox = shift;
	my $sel = $listbox->get();
	$listbox->clear_selection();
	viewer_on($sel);
}

my $log;
my $viewer;
sub viewer_on() {
	my $host=shift;
	# Adrian: check whether host is defined before looking for logfile
	# (avoid perl-exception in next line)
	return unless (defined $host);
	# a logviewer makes no sense without any log to look at
	return unless -f "$logdir/$host";
	
	# shrink the updater window
	$updater_win->{-height}=10;
	$updater_win->layout();
	
	# create the textviewer
	$viewer_win=$cui->add('ViewerWin','Window',
		-width=>$updater_win->{-width},
		-height=>$cui->height()-(1+$updater_win->{-height}),
		-y=>$updater_win->{-height}
		);
	open $log,"$logdir/$host";
	$viewer=$viewer_win->add('Viewer','TextViewer',
		-vscrollbar=>1,
		-wrapping=>1,
		-border=>1,
		-title=>$host,
		-text=>join("",<$log>));
	$viewer->focus();
	$cui->set_timer('viewer-update',\&viewer_update);
}

sub viewer_off() {
	$cui->delete_timer('viewer-update');
	close $log;
	$cui->delete("ViewerWin");
	$updater_win->{-height}=$cui->height()-1;
	$updater_win->layout();
	$updater_win->focus();
	$cui->draw();
}

sub viewer_update() {
	my $newtext=join("",<$log>);
	if ($newtext) {
		$viewer->{-text}.=$newtext;
		$viewer->draw();
	}
}

# - - - - - - - - - - - - - - - - - - - -
#  main routine
# - - - - - - - - - - - - - - - - - - - -

# options
my ($opt_help, $opt_version, $opt_simultaneous, $opt_dryrun, $opt_ordered, $opt_updater_command, $opt_hostlist_command);

# Adrian: also print help-message once getopts returns an error
# (should also subpress warnings of getopts about "Unknown options" though but how ?!)
Getopt::Long::Configure ("bundling");
GetOptions(
    'help|h' => \$opt_help,
    'version' => \$opt_version,
    'simultaneous|s=i' => \$opt_simultaneous,
    'dryrun|n' => \$opt_dryrun,
    'ordered|o' => \$opt_ordered,
    'command|c=s' => \$opt_updater_command,
    'hostlist|l=s' => \$opt_hostlist_command,
) or HELP_MESSAGE(*STDERR) and exit (1);

if ($opt_help) {
    HELP_MESSAGE(*STDOUT);
    exit(0);
};

if ($opt_version) {
    VERSION_MESSAGE(*STDOUT);
    exit(0);
};

my @hostlist;
do {
    my @hostlist_tmp;
    foreach (@ARGV) {
        if (/^@(\S+)/) {
           push @hostlist_tmp, split(/\s+/, `$libexec_dir/get_hosts_from_netgroup $1`);
        } elsif ( /^%(\S+)/ ) {
           push @hostlist_tmp, split(/\s+/, `$opt_hostlist_command $1`) if ($opt_hostlist_command);
        } else {
           push @hostlist_tmp, $_;
        };
    };
    # avoid updating the same host more than once
    my %had_host;
    foreach (@hostlist_tmp) {
        next if ($had_host{$_});
        $had_host{$_} = 1;
        push @hostlist, $_;
    };
};

if ($#hostlist < 0) {
    print STDERR "\nNo hosts specified on command line or netgroups expanded to empty list\n\n";
    HELP_MESSAGE(*STDERR);
    exit(1);
};


# create logdir
my $LOG_BASE = "$ENV{HOME}/.cache/fai-updater/";
$logdir=$LOG_BASE . strftime("%Y-%m-%d_%H-%M-%S",localtime) . ($opt_dryrun ? '.dryrun' : '');
die "logdir $logdir already exists" if (-d $logdir);
die "can't create logdir $logdir" unless (make_path($logdir));

#initialize Curses
$cui=new Curses::UI(-color_support=>1, -clear_on_exit=>1);
#create window for the updater display, leave space for the statusbar
$updater_win=$cui->add('UpdateColumns','Window',-height=>$cui->height()-1);
#create the updater display
my $display=FAI::Updater::Display::Curses->new(WIN=>$updater_win,SELECT=>\&select_handler);

# build up the statusbar. as the updater display is now correctly layouted, 
# use its width for proper alignment
my $statusbar=$cui->add('Statusbar','Window', 
	-y=>$cui->height()-1,
	-width=>$updater_win->width());
# hotkey descriptions
$statusbar->add(undef,'Label',-text=>'q:Quit c:Cancel <ENTER>:Open Viewer <ESC>:Close Viewer');
# Status
$statusbar->add(undef,'Label',-text=>'Status: ',
	-x=>-21);
$statusdisplay=$statusbar->add('statusdisplay','Label',
	-text=>'processing',
	-x=>-1,
	-width=>20,
	-paddingspaces=>1,
	-textalignment=>'middle',
	-sbborder=>1,
	-bg=>'red');
	
$updater_win->focus();
$cui->set_binding( \&quit, "q");
$cui->set_binding( \&cancel_update, "c");
$cui->set_binding( \&viewer_off, "\e");

$display->append(FAI::Updater::Display::Logfile->new(FILENAME=>"$logdir/FAI_UPDATER.log"));
my $fai_update_command = (
 $opt_dryrun ? "$libexec_dir/dryrun" : (
   $opt_updater_command ? "$opt_updater_command" : "$libexec_dir/faiupdate" 
 )
);
$updater=FAI::Updater->new(DISPLAY=>$display, COMMAND=>$fai_update_command, ORDERED=>$opt_ordered, LOGDIR=>$logdir);
$updater->max_simultanous($opt_simultaneous) if $opt_simultaneous;
$updater->init_hostlist(@hostlist);

$cui->draw();
$cui->set_timer('updater',\&updater_cb);
$cui->mainloop;
